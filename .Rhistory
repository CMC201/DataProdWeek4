summary(fit)$coef
lmF<-lm(Numeric[hunger$sex=='Female']~Year[hunger$sex=='Female'],hunger)
lmF<-lm(Numeric[hunger$Sex=='Female']~Year[hunger$Sex=='Female'],hunger)
lmM<-lm(Numeric[hunger$Sex=='Male']~Year[hunger$Sex=='Male'],hunger)
lmBoth<-lm(Numeric~Year+Sex,hunger)
summary(lmBoth)
lmInter<-lm(Numeric,Year+Sex+Sex*Year,hunger)
lmInter<-lm(Numeric~Year+Sex+Sex*Year,hunger)
summary(lmInter)
fit<-lm(y~x,out2)
plot(fit,which=1)
fitno<-lm(y~x,out2[-1,])
plot(fitno,which=1)
coef(fit)-coef(fitno)
head(dfbeta(fit))
resno<-out2[1,'y']-predict(fitno,out2[1,])
1-resid(fit)[1]/resno
head(hatvalues(fit))
coef(fit)
sigma<-sqrt(deviance(fit)/df.residual(fit))
rstd<-resid(fit)/sigma*sqrt(1-hatvalues(fit))
rstd<-resid(fit)/(sigma*sqrt(1-hatvalues(fit)))
head(cbind(rstd,rstandard(fit)))
plot(fit,which=3)
plot(fit,which=2)
sigma1<-sqrt(deviance(fitno)/df.residual(fitno))
resid(fit)[1]/(sigma1*sqrt(1-hatvalues(fit)[1]))
head(rstudent(fit))
dy<-predict(fitno,out2)-predict(fit,out2)
dy/2*sigma^2
sum(dy^2)/(2*sigma^2)
plot(fit,which=5)
data(mtcars)
data(mtcars)
head(mtcars)
fitcars<-lm(mpg~cyl+wt,mtcars)
summary(fitcars)
fitcarssimple<-lm(mpg~cyl,mtcars)
summary(fitcarssimple)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit<-lm(y~x)
hat(fit)
hatvalues(fit)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit<-lm(y~x)
hatvalues(fit)
dfbeta(fit)
dfbetas(fit)
install.packages("lmtest")
library("lmtest", lib.loc="~/R/win-library/3.5")
lrtest(fitcars,fitcarssimple)
q()
swirl()
library(swirl)
swirl()
rgp1()
rgp2()
head(swiss)
mdl<-lm(Fertility~.,swiss)
vif(mdl)
mdl2<-lm(Fertility~Education+Catholic+Agriculture+Infant.Mortality,swiss)
vif(mdl2)
x1c<-simbias()
apply(x1c,1,mean)
fit1<-lm(swiss$Fertility~swiss$Agriculture)
fit1<-lm(Fertility~Agriculture,swiss)
fit3<-lm(Fertility~Agriculture+Examination+Education,swiss)
anova(fit1,fit3)
deviance(fit3)
d<-deviance(fit3/43)
d<-deviance(fit3)/43
n<-(deviance(fit1)-deviance(fit3))/2
n/d
pf(n/d,2,43,lower.tail=FALSE)
shapiro.test(fit3$residuals)
anova(fit1,fit3,fit5,fit6)
ravenData
mdl<-glm(ravenWinNum~ravenScore,family='binomial',ravenData)
lodds<-predict(mdl,data.frame(ravenScore=c(0,3,6)))
exp(lodds)/(1+exp(lodds))
summary(mdl)
exp(confint(mdl))
anova(mdl)
qchisq(0.95,1)
var(rpois(1000,50))
head(hits)
class(hits[,'date'])
as.integer(head(hits[,'date']))
mdl<-glm(visits~date,poisson,hits)
summary(mdl)
exp(confint(mdl,'date'))
which.max(hits[,'visits'])
hits[704,]
lambda<-mdl$fitted.values[704]
qpois(.95,lambda)
mdl2<-glm(visits~date,poisson,hits,offset=log(visits+1))
mdl2 <- glm(formula = simplystats ~ date, family = poisson, data = hits, offset =
| log(visits + 1))
mdl2 <- glm(formula = simplystats ~ date, family = poisson, data = hits, offset = log(visits + 1))
qpois(.95,mdl2$fitted.values[704])
q()
library(MASS)
?shuttle
shuttle1<-glm(shuttle$use~shuttle$wind,family='binomial')
shuttle1$coefficients
exp(-0.0318)
shuttle1<-glm(shuttle$use~shuttle$wind-1,family='binomial')
shuttle1$coefficients
exp(-0.2513)
exp(-0.2831)
.777/.753
shuttle1<-glm(shuttle$use~shuttle$wind+shuttle$magn,family='binomial')
shuttle1$coefficients
exp(-.363)/exp(.032)
exp(-.363)/exp(-.032)
shuttle1<-glm(shuttle$use~shuttle$wind+shuttle$magn-1,family='binomial')
shuttle1$coefficients
exp(-.3635)/exp(-.3955)
exp(-.3535)
data("InsectSprays")
head(InsectSprays)
newsprays<-InsectSprays[spray=c('A','B')]
newsprays<-InsectSprays[,spray=c('A','B')]
newsprays<-InsectSprays[,spray==c('A','B')]
newsprays<-subset(InsectSprays,spray==c('A','B'))
head(newsprays)
newsprays<-subset(InsectSprays,spray=='A',spray=='B')
newsprays<-subset(InsectSprays,spray=='A'|spray=='B')
spraysmod<-glm(newsprays$count~newsprays$spray,family='poisson')
summary(spraysmod)
1/.684
1/.702
shuttle1<-glm(1-shuttle$use~shuttle$wind,family='binomial')
shuttle1<-glm((1-shuttle$use)~shuttle$wind,family='binomial')
shuttle1<-glm((1-as.numeric(shuttle$use))~shuttle$wind,family='binomial')
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
2.67-.055
exp(2.615)
exp(.05588)
knots<-0
splineTerms <- sapply(knots, function(knot) (x > knot) * (x - knot))
xMat <- cbind(1, x, splineTerms)
yhat <- predict(lm(y ~ xMat - 1))
plot(x, y, frame = FALSE, pch = 21, bg = "lightblue", cex = 2)
lines(x, yhat, col = "red", lwd = 2)
summary(yhat)
yhat <- predict(lm(y ~ xMat))
plot(x, y, frame = FALSE, pch = 21, bg = "lightblue", cex = 2)
lines(x, yhat, col = "red", lwd = 2)
shuttle$auto <- 1 * (shuttle$use == "auto")
shuttle$headwind <- 1 * (shuttle$wind == "head")
fit <- glm(auto ~ headwind+magn, data = shuttle, family = binomial)
summary(fit)
exp(coef(fit))
q()
data(mtcars)
head(mtcars)
?mtcars
plot(am,mpg,data=mtcars)
plot(mtcars$am,mtcars$mpg)
boxplot(mtcars$am,mtcars$mpg)
mean(mtcars$mpg[,am==0])
mean(mtcars$mpg[,mtcars$am==0])
mean(subset(mtcars,am==0)$mpg)
mean(subset(mtcars,am==1)$mpg)
fit1<-lm(mpg~am+wt+disp,data=mtcars)
summary(fit1)
fit1<-lm(mpg~am+wt+disp-1,data=mtcars)
summary(fit1)
fit1<-lm(mpg~am+wt+disp+cyl-1,data=mtcars)
summary(fit1)
slm1<-step(fit1)
slm1$anova
summary(slm1)
fit2<-lm(mpg~am+wt+disp,data=mtcars)
slm1<-step(fit2)
slm2<-step(slm1)
q()
install.packages("kernlab")
install.packages("shiny")
install.packages("caret")
library(swirl)
swirl()
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
library("Hmisc", lib.loc="~/R/win-library/3.5")
summary(mixtures)
head(mixtures)
dim(mixtures)
mixtures$index<-c(1:1030)
head(mixtures)
qplot(rowNumber,CompressiveStrength,data=training,color=cut2(FlyAsh,4))
qplot(c(1:744),CompressiveStrength,data=training,color=cut2(FlyAsh,4))
qplot(c(1:744),CompressiveStrength,data=training,color=cut2(training$FlyAsh,4))
ashcuts=cut2(training$FlyAsh,4)
agecuts=cut2(trainig$Age,4)
agecuts=cut2(training$Age,4)
qplot(c(1:744),CompressiveStrength,data=training,color=ashcuts)
ashcuts=cut2(training$FlyAsh,m=50)
agecuts=cut2(training$Age,m=50)
qplot(c(1:744),CompressiveStrength,data=training,color=ashcuts)
agecuts=cut2(training$Age,m=100)
ashcuts=cut2(training$FlyAsh,m=100)
qplot(c(1:744),CompressiveStrength,data=training,color=ashcuts)
qplot(c(1:744),CompressiveStrength,data=training,colour=ashcuts)
qplot(c(1:744),CompressiveStrength,data=training,color=factor(ashcuts))
qplot(c(1:744),CompressiveStrength,data=training,aes(color=factor(ashcuts))
)
qplot(c(1:744),CompressiveStrength,data=training,color=factor(ashcuts))
summary(training)
qplot(c(1:774),CompressiveStrength,data=training,color=factor(ashcuts))
qplot(c(1:774),CompressiveStrength,data=training,color=factor(ashcuts),geom = c("point", "smooth"), method="lm", se = TRUE))
qplot(c(1:774),CompressiveStrength,data=training,color=factor(ashcuts),geom = c("point", "smooth"), method="lm", se = TRUE)
qplot(c(1:774),CompressiveStrength,data=training,color=factor(agecuts),geom = c("point", "smooth"), method="lm", se = TRUE)
hist(training$Superplasticizer)
summary(training$Superplasticizer)
hist(log10(training$Superplasticizer)+1)
hist(log10(training$Superplasticizer))
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)+ data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
summary(training)
summary(training$IL*)
colnames(training)
subtrain<-subset(training,select=c(diagnosis,IL_11:IL_8))
subtest<-subset(testing,select=c(diagnosis,IL_11:IL_8))
pretrain<-preProcess(subtrain[2:13,],method='pca',thresh=0.9)
summary(pretrain)
pretrain<-preProcess(subtrain,method='pca',thresh=0.9)
summary(pretrain)
head(subtrain)
pretrain<-preProcess(subtrain[,2:13],method='pca',thresh=0.9)
summary(pretrain)
pretrain$numComp
pretrain<-preProcess(subtrain[,2:13],method='pca',thresh=0.8)
nonPCA<-train(diagnosis~.,data=subtrain,method='glm')
library("caret", lib.loc="~/R/win-library/3.5")
nonPCA<-train(diagnosis~.,data=subtrain,method='glm')
install.packages("e1071")
library("caret", lib.loc="~/R/win-library/3.5")
library("e1071", lib.loc="~/R/win-library/3.5")
nonPCA<-train(diagnosis~.,data=subtrain,method='glm')
withPCA<-train(diagnosis~.,data=subtrain,method='glm',preProcess=pretrain)
withPCA<-train(diagnosis~.,data=subtrain,method='glm',pretrain)
nonPCApredict<-predict.glm(nonPCA,newdata=subtest)
summary(nonPCA)
View(subtrain)
nonPCA<-train(subtrain[,-1],subtrain[,1],method='glm')
summary(nonPCA)
confusionMatrix(subtest$diagnosis,predict(nonPCA,subtest))
withPCA <-  train(subtrain[,1],subtrain[,-1], preProcess="pca", method="glm",
trControl=trainControl(preProcOptions = list(thresh = 0.8)) )
withPCA <-  train(subtrain[,-1],subtrain[,1], preProcess="pca", method="glm",
trControl=trainControl(preProcOptions = list(thresh = 0.8)) )
confusionMatrix( predict(withPCA,subtest),subtest$diagnosis)
pretrain<-preProcess(subtrain[,2:13],method='pca',thresh=0.8)
pretrain$numComp
q()
install.packages(c("rattle", "rpart"))
q()
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
library("AppliedPredictiveModeling", lib.loc="~/R/win-library/3.5")
library("caret", lib.loc="~/R/win-library/3.5")
install.packages("ElemStatLearn")
library("ElemStatLearn", lib.loc="~/R/win-library/3.5")
install.packages("pgmm")
library("pgmm", lib.loc="~/R/win-library/3.5")
library("rpart", lib.loc="~/R/win-library/3.5")
inTrain<-createDataPartition(segmentationOriginal$Case,p=0.7)
View(inTrain)
training<-createDataPartition[,inTrain]
training<-segmentationOriginal[,inTrain]
inTrain<-createDataPartition(segmentationOriginal$Case,p=0.7,list=FALSE)
training<-segmentationOriginal[,inTrain]
training<-segmentationOriginal[inTrain,]
test<-segmentationOriginal[-inTrain,]
set.seed(125)
modFit<-train(Case~.,method='rpart')
modFit<-train(Case~.,method='rpart',data=segmentationOriginal)
library("e1071", lib.loc="~/R/win-library/3.5")
plot(modFit)
summary(modFit)
plot(modFit$finalModel)
print(modFit$finalModel)
modFit<-train(Class~.,method='rpart',data=segmentationOriginal)
print(modFit$finalModel)
plot(modFit$finalModel)
inTrain<-createDataPartition(segmentationOriginal$Case)
training<-segmentationOriginal[inTrain,]
inTrain<-createDataPartition(segmentationOriginal$Case,list=FALSE)
training<-segmentationOriginal[inTrain,]
test<-segmentationOriginal[-inTrain,]
set.seed(125)
modFit<-train(Case~.,method='rpart',data=segmentationOriginal)
print(modFit$finalModel)
modFit<-train(Class~.,method='rpart',data=segmentationOriginal)
print(modFit$finalModel)
q()
library(AppliedPredictiveModeling)
library(caret)
library(ElemStatLearn)
library(pgmm)
library(rpart)
data(olive)
olive = olive[,-1]
newdata = as.data.frame(t(colMeans(olive)))
modFit<-train(Area~.,data=olive,method=)
head(olive)
summary(olive)
str(olive)
modFit<-train(Area~.,data=olive,method='rpart')
predict(modFit,newdata)
summary(olive$Area)
str(olive$Area)
dim(olive$Area)
tail(olive$Area)
head(olive$Area)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
head(trainSA)
modFit<-train(chd~age+alcohol+adiposity+ldl+typea+tobacco,data=trainSA,method='glm',family='binomial')
summary(trainSA$chd)
str(trainSA$chd)
modFit<-train(as.factor(chd)~age+alcohol+adiposity+ldl+typea+tobacco,data=trainSA,method='glm',family='binomial')
prediction<-predict(modFit,testSA)
value<-testSA$chd
values<-testSA$chd
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass
testpred<-predict(modFit,testSA)
trainpred<-predict(modFit,trainSA)
testvals<-testSA$chd
trainvals<-trainSA$chd
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainvals,trainpred)
missClass(as.numeric(trainvals),as.numeric(trainpred))
missClass(as.numeric(testvals),as.numeric(testpred))
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
install.packages("randomForest")
library("randomForest", lib.loc="~/R/win-library/3.5")
head(vowel.test)
class(vowel.test$y)
vowel.test$y<-as.factor(vowel.test$y)
vowel.train$y<-as.factor(vowel.train$y)
set.seed(33833)
randomForest(y~.,data=vowel.train)
myrf<-randomForest(y~.,data=vowel.train)
varImp(myrf)
desc(varImp(myrf))
sort(varImp(myrf),decreasing=TRUE)
sort(varImp(myrf)$overall,decreasing=TRUE)
library(dpylr)
library(dplyr)
import<-varImp(myrf)
View(import)
q()
install.packages("rtools")
install.packages("miniUI")
install.packages("shinythemes")
install.packages("googleVis")
install.packages("plotly")
summary(volcano)
head(volcano)
library("plotly", lib.loc="~/R/win-library/3.5")
install.packages("webshot")
library("webshot", lib.loc="~/R/win-library/3.5")
plot_ly(type='surface',z=df,colorscale='Reds',hoverinfo='z')
df<-volcano
plot_ly(type='surface',z=df,colorscale='Reds',hoverinfo='z')
plot_ly(type='surface',z=df,colorscale='Reds',hoverinfo='z')
plot_ly(type='surface',z=df,colorscale='Reds',hoverinfo='z')
knit_with_parameters('~/MOOCs/Intro Data Science/Data Products/Week 3/Week3Project.Rmd')
library(plotly)
df<-volcano
plot_ly(type='surface',z=df,colorscale='Reds',hoverinfo='z')
library(plotly,quietly=TRUE)
df<-volcano
plot_ly(type='surface',z=df,colorscale='Reds',hoverinfo='z')
setwd('MOOCs/Intro Data Science/Data Products/Week 4/')
histdata<-read.csv('nycmonthlyclimate.csv')
colnames(histdata)
smalldata<-subset(histdata,subset=!is.na(MonthlyMeanTemp),select=c(DATE,MonthlyMeanTemp,MonthlyDaysWithGT90Temp,MonthlyDaysWithLT32Temp))
View(smalldata)
summary(smalldata)
class(smalldata$DATE)
class(smalldata$MonthlyMeanTemp)
smalldata$DATE<-as.Date(smalldata$DATE,format='%m/%y')
class(smalldata$DATE)
View(smalldata)
smalldata<-subset(histdata,subset=!is.na(MonthlyMeanTemp),select=c(MonthlyMeanTemp,MonthlyDaysWithGT90Temp,MonthlyDaysWithLT32Temp))
monthslist<-c('Jan','Feb','Mar','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec')
monthslist<-c('Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec')
monthavg<-ts(smalldata$MonthlyMeanTemp,frequency=12)
monthhot<-ts(smalldata$MonthlyDaysWithGT90Temp,frequency=12)
monthcold<-ts(smalldata$MonthlyDaysWithLT32Temp,frequency=12)
monthavg<-ts(smalldata$MonthlyMeanTemp)
monthhot<-ts(smalldata$MonthlyDaysWithGT90Temp)
monthcold<-ts(smalldata$MonthlyDaysWithLT32Temp)
avgmod<-auto.arima(monthavg)
hotmod<-auto.arima(monthhot)
coldmod<-auto.arima(monthcold)
library(forecast)
avgmod<-auto.arima(monthavg)
hotmod<-auto.arima(monthhot)
coldmod<-auto.arima(monthcold)
avgpred<-predict(avgmod,n.ahead=36)
View(avgpred)
hotpred<-predict(hotmod,n.ahead=36)
coldpred<-predict(coldmod,n.ahead=36)
smalldata<-subset(histdata,subset=!is.na(MonthlyMeanTemp),select=c(DATE,MonthlyMeanTemp,MonthlyDaysWithGT90Temp,MonthlyDaysWithLT32Temp))
View(smalldata)
smalldata$DATE<-as.Date(smalldata$DATE,'%y/%m/%d')
View(smalldata)
library(lubridate)
smalldata<-subset(histdata,subset=!is.na(MonthlyMeanTemp),select=c(DATE,MonthlyMeanTemp,MonthlyDaysWithGT90Temp,MonthlyDaysWithLT32Temp))
smalldata$DATE<-as_date(smalldata$DATE)
View(smalldata)
View(avgpred)
avgpred[["pred"]]
View(smalldata)
smalldata$DATE[118:120]<-as_date(c('2018-10-31','2018-11-30','2018-12-31'))
next3df<-df(as_date(c('2018-10-31','2018-11-30','2018-12-31')),c(64.1,46.6,35.0),c(0,0,0),c(0,0,9))
next3df<-data.frame(as_date(c('2018-10-31','2018-11-30','2018-12-31')),c(64.1,46.6,35.0),c(0,0,0),c(0,0,9))
View(next3df)
smalldata<-rbind(smalldata,next3df)
names(next3df)<-names(smalldata)
smalldata<-rbind(smalldata,next3df)
View(smalldata)
View(histdata)
monthavg<-ts(smalldata$MonthlyMeanTemp,frequency=12)
monthhot<-ts(smalldata$MonthlyDaysWithGT90Temp,frequency=12)
monthcold<-ts(smalldata$MonthlyDaysWithLT32Temp,frequency=12)
avgmod<-auto.arima(monthavg)
hotmod<-auto.arima(monthhot)
coldmod<-auto.arima(monthcold)
avgpred<-predict(avgmod,n.ahead=36)
hotpred<-predict(hotmod,n.ahead=36)
coldpred<-predict(coldmod,n.ahead=36)
seq(as.Date("2018/12/31"), by = "month", length.out = 36)
seq(ymd('2019-01-31'),ymd('2021-12-31'),by='months')
startDate<-ymd('2019-01-31')
startDate %m+% months(c(0:36))
newdates<-startDate %m+% months(c(0:35))
preddf<-data.frame(newdates,avgpred,hotpred,coldpred)
names(preddf)<-names(smalldata)
fulldata<-rbind(smalldata,preddf)
View(hotpred)
preddf<-data.frame(newdates,avgpred[['pred']],hotpred[['pred']],coldpred[['pred']])
names(preddf)<-names(smalldata)
fulldata<-rbind(smalldata,preddf)
View(fulldata)
preddf<-data.frame(newdates,round(avgpred[['pred']],digits=2),round(hotpred[['pred']],digits=2),round(coldpred[['pred']],digits=2))
names(preddf)<-names(smalldata)
fulldata<-rbind(smalldata,preddf)
View(fulldata)
fulldata$year<-year(fulldata$DATE)
fulldata$month<-month(fulldata$DATE)
View(fulldata)
fulldata$month<-month(fulldata$DATE,label=TRUE)
shiny::runApp()
runApp()
View(fulldata)
runApp()
histdata<-read.csv('nycmonthlyclimate.csv')
smalldata<-subset(histdata,subset=!is.na(MonthlyMeanTemp),select=c(DATE,MonthlyMeanTemp,MonthlyDaysWithGT90Temp,MonthlyDaysWithLT32Temp))
smalldata$DATE<-as_date(smalldata$DATE)
View(smalldata)
class(smalldata$DATE)
smalldata$DATE<-as_date(as.character(smalldata$DATE))
smalldata<-subset(histdata,subset=!is.na(MonthlyMeanTemp),select=c(DATE,MonthlyMeanTemp,MonthlyDaysWithGT90Temp,MonthlyDaysWithLT32Temp))
View(smalldata)
smalldata$DATE<-as_date(mdy_hm(as.character(smalldata$DATE)))
runApp()
runApp()
